@startuml
!pragma layout smetana
'https://plantuml.com/class-diagram
class LMS
{
 - Branches: Branch
 + viewBranchesInfo()
 + ManageBranches()
}
class FineManagement
{
  - borrow : Borrow
  - Fine : Float
  - FineStatus : Boolean
  + calculateFine()
  + Notify(Integer ID)

}

class Branch
{
 - Libraries : Library
 - BranchID : Integer
 + ShowInfo(): void
}
class Library {
  - Name: String
  - Location : String
  - Clark: Librarian
  - BooksList : BookList
  - Users : User
  - CurrentBorrowedList: BookList
   ''Takes the info Of the user and the borrowed Books add it to the currentBorrowedBooks and search for the user in the userList and give it the Book to add it in its list and calls the decrease function for stock
  + Borrow() : void
  + login(Integer Email, Integer Password)
  + Retrieve(Book book)
  + DisplayBorrowedList() : List<Book>
  ''returns the K frequent members
  + ViewTopFrequent(Integer number) List<User>
  + ShowLibraryInfo() : void
}
''Could have an abstract class to implement the borrow function ?
class BookList {
  - Books: Book
  ' -BookDescriptions: BookDescription
 + Add()
 + Delete() : Boolean
 + SearchByTitle() : Book
 + SearchByAuthor() : List<Book>
 + Update()
 + Categorize() List<List<Book>>
 '' What may return?
}
class Book {
 - BookDescription: BookDescription
 - Stock
 ''Could this be removed and replaced by unique ID instead?
 ''Decrement the stock could be removed and replaced by setter function
 + StockManagement()
 + DisplayInfo()


}
class BookDescription {
  - Author: User
  - Publisher: String
  - ISBN : Integer
  - Title: String
  - ID : Integer
  ' one ISBN could have multiple IDs
  - publicationDate : Date
  - TableOfContents : List
  - genre: String
  - CanBeBorrowed : Boolean
  - Summary : String
  + viewDescription() : void
}
class User {
  - ID : Integer
  - BorrowedList : BookList
  - readingList : BookList
  - Frequency : Integer
  'Adds the Book to the user's borrowedList
  + AddToBorrowedList()
  'Remove the book from the user's borrowedList
  + Retrieve(Book book) : Boolean
  + AddToReadingList(Book book) : void
  + Reserve(Book book) : Boolean
}
abstract class Person{
  - name:  String
  - age: Integer
  - Gender : Enum
  - Email : String
  - phoneNumber : Integer
  - password : string
  + EditName(String name) : void
  + EditEmail(String Email) : void
  + EditPassword(String Password) : void
  + EditPhoneNumber(Integer phoneNumber): void

}
''What are the functions of librarian and how to let them confirm the retrieve request
class Librarian {
     EmployeeID : Integer
}

class Borrow {
  - userID : Integer
  '' can we add an ID to each book so we need to sum by ISBN to know the stock so we can assign the ID to the borrow class
  - bookID : Integer
  - Issue Date : Date
  - Due Date : Date

  + Display() : void
  ''retrieves the History of specific user
  + DisplayHistory(integer ID) List<Borrow>
  + Extend(Integer BookID, Date DueDate, Integer UserID) : Boolean

}

LMS "1" --> "*" Branch : Has
BookList "1" --> "*" Book : Holds
Branch "1" --> "1" Library : includes
FineManagement "1" --> "1" Borrow : includes
Book "1" --> "1" BookDescription : Has
Person "1" -->"*" Librarian : extends
Person "1" -->"*" User : extends
Library "1" --> "*" User : Has
Library "1" --> "1" BookList : Records
Librarian "1" --> "*" Borrow : Processes
Librarian "1" -->  "1" Library : Works in
FineManagement "1" --> "*" User : Notifies
@enduml